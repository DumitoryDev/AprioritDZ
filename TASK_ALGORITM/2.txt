Выберите наиболее подходящий контейнер для хранения информации телефонного справочника. Подразумевается, что справочник позволяет найти информацию о абоненте по номеру. Обоснуйте выбор определённого контейнера. Обоснование подразумевает приведение списка наиболее часто применяемых для этого контейнера операций и оценок их сложностей по O нотации и описание рассмотренных альтернатив.



Я думаю, что для этой задачи отлично подходит std::map. Потому что:

1. Поиск O(log n) даже в худшем случае, т.к. дерево всегда сбалансированное 
2. Операции вставки, удаления тоже будут O(log n) 
3. Позволит нам хранить ключ в виде номера.

unordered_map я бы не стал использовать, потому что в худшем случае сложность будет составлять O(N) для всех типов операций. Всё зависит от алгоритма хэширования. 


Альтернативы в виде вектора или листа не выглядят разумными, потому что:
1. Поиск элемента в векторе был бы O(N) в любом случае. (Обращение по индексу не будет иметь смысла, ведь мы ищем по номеру)
2. Вставка и удаление в векторе тоже O(N)
3. Не смотря на то, что в вставка и удаление в листе происходят за O(1), его поиск элементов и доступ к ним происходят за O(N), что тоже не подходит под нашу задачу.

Результируя:

map : вставка, поиск, удаление = O(log n)
unordered_map: вставка, поиск, удаление = O(1), но в худшем случае O(n)
vector: вставка, поиск, удаление = O(n)
list: вставка, удаление =  O(1), поиск O(n)


ресурсы:
![Image alt](https://miro.medium.com/max/4080/1*Uzrw9faXdYgg20I6NjUTBw.png)
